#  (Assumes you already have `bst` booster + X_train matrix)
# ===============================================================
library(tidyverse)
library(shapviz)
library(xgboost)
library(ggplot2)
library(scales)
# 1. --------------------------------------------------------------------------------
#    Prepare SHAP values matrix (m rows × p + 1 columns: last col = baseline)
#    We reuse the shapviz object we created earlier
sv  # <- should exist from earlier, else rebuild with shapviz()
# Extract SHAP matrix and feature values
S <- shapviz_values(sv)          # m × p   matrix of SHAP values
# ===============================================================
#  Generate per-patient SHAP tables for Slide 3
#  Assumes you already built:
#    bst  – xgboost booster
#    sv   – shapviz object (TreeSHAP)
# ===============================================================
library(tidyverse)
library(shapviz)
library(gridExtra)
# --- 1. pull SHAP matrices & data frames -----------------------
S <- shapviz_values(sv)          # SHAP matrix (n × p)
# ===============================================================
#  Generate per-patient SHAP tables for Slide 3
#  Assumes you already built:
#    bst  – xgboost booster
#    sv   – shapviz object (TreeSHAP)
# ===============================================================
library(tidyverse)
library(shapviz)
library(gridExtra)
# --- 1. pull SHAP matrices & data frames -----------------------
S <- shapviz_values(sv)          # SHAP matrix (n × p)
S <- shapviz_values(sv)
S <- sv_values(sv)
# ===============================================================
#  Generate per-patient SHAP tables for Slide 3
#  Uses: bst (xgb.Booster)  and  sv (shapviz object) already in memory
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Pull matrices & data frames ---------------------------
S        <- sv$S                 # SHAP matrix  (n × p)
X        <- sv$X                 # feature data (data.frame)
preds    <- predict(bst, as.matrix(X), type = "prob")
# ---- 2.  Pick exemplar indices --------------------------------
high_id  <- which.max(preds)               # highest death risk
low_id   <- which.min(preds)               # lowest death risk
mid_id   <- which.min(abs(preds - 0.50))   # closest to 0.5
cases <- list(
high = high_id,
mid  = mid_id,
low  = low_id
)
# ---- 3.  Helper to build tidy table ----------------------------
build_tbl <- function(row_id, keep = 8) {
tibble(
Feature = colnames(S),
Value   = as.numeric(X[row_id, ]),
SHAP    = S[row_id, ]
) %>%
arrange(desc(abs(SHAP))) %>%
slice_head(n = keep)
}
# ---- 4.  Save each table as a PNG ------------------------------
save_tbl_png <- function(tbl, fname) {
png(fname, width = 1600, height = 480, res = 200)
grid.table(round(tbl, 2))
dev.off()
}
dir.create("tables", showWarnings = FALSE)
for (nm in names(cases)) {
tbl   <- build_tbl(cases[[nm]])
fpath <- file.path("tables", paste0("case_", nm, "_table.png"))
save_tbl_png(tbl, fpath)
cat("✅  Saved", fpath, "\n")
}
# ===============================================================
#  Generate per-patient SHAP tables for Slide 3
#  Requirements already in memory:
#    bst  – xgboost booster
#    sv   – shapviz object (TreeSHAP)
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Pull SHAP matrices & feature data --------------------
S     <- sv$S            # SHAP matrix  (n × p)
X     <- sv$X            # feature data (data.frame)
preds <- predict(bst, as.matrix(X), type = "prob")
# ---- 2.  Select exemplar indices ------------------------------
high_id <- which.max(preds)               # highest predicted risk
low_id  <- which.min(preds)               # lowest predicted risk
mid_id  <- which.min(abs(preds - 0.50))   # closest to 0.5
cases <- list(
high = high_id,
mid  = mid_id,
low  = low_id
)
# ---- 3.  Helper: build top-driver table -----------------------
build_tbl <- function(row_id, keep = 8) {
tibble(
Feature = colnames(S),
Value   = as.numeric(X[row_id, ]),
SHAP    = S[row_id, ]
) %>%
arrange(desc(abs(SHAP))) %>%
slice_head(n = keep)
}
# ---- 4.  Helper: save PNG with numeric rounding ----------------
save_tbl_png <- function(tbl, fname) {
tbl_round <- tbl %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
png(fname, width = 1600, height = 480, res = 200)
grid.table(tbl_round)
dev.off()
}
# ---- 5.  Create folder and write files ------------------------
dir.create("tables", showWarnings = FALSE)
for (nm in names(cases)) {
tbl   <- build_tbl(cases[[nm]])
fpath <- file.path("tables", paste0("case_", nm, "_table.png"))
save_tbl_png(tbl, fpath)
cat("✅  Saved", fpath, "\n")
}
View(cases)
cases[["high"]]
View(S)
View(cl)
# ===============================================================
#  SHAP top-driver tables – now with Patient ID
#  Requires 'bst' (xgb.Booster) and 'sv' (shapviz object)
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Pull SHAP matrix, data, and ID column ----------------
S <- sv$S             # SHAP values (n × p)
X <- sv$X             # feature data
preds <- predict(bst, as.matrix(X), type = "prob")
# Name of your patient identifier column in X, if present
id_col <- "ICUSTAY_ID"
# Provide fallback row number if ID col missing
if (!id_col %in% colnames(X)) {
X <- X %>% mutate(ROW_ID = row_number())
id_col <- "ROW_ID"
}
# ---- 2.  Select exemplar indices ------------------------------
high_id <- which.max(preds)
low_id  <- which.min(preds)
mid_id  <- which.min(abs(preds - 0.50))
cases <- list(
high = high_id,
mid  = mid_id,
low  = low_id
)
# ---- 3.  Helper: build tidy table with top drivers ------------
build_tbl <- function(row_id, keep = 8) {
tibble(
Feature = colnames(S),
Value   = as.numeric(X[row_id, ]),
SHAP    = S[row_id, ]
) %>%
arrange(desc(abs(SHAP))) %>%
slice_head(n = keep) %>%
mutate(Patient = X[[id_col]][row_id], .before = Feature)
}
# ---- 4.  Helper: save PNG, rounding numeric cols --------------
save_tbl_png <- function(tbl, fname) {
tbl_round <- tbl %>%
mutate(across(where(is.numeric), round, 2))
png(fname, width = 1800, height = 500, res = 200)
grid.table(tbl_round)
dev.off()
}
# ---- 5.  Generate & save PNGs --------------------------------
dir.create("tables", showWarnings = FALSE)
for (nm in names(cases)) {
tbl   <- build_tbl(cases[[nm]])
fpath <- file.path("tables", paste0("case_", nm, "_table.png"))
save_tbl_png(tbl, fpath)
cat("✅  Saved", fpath, "\n")
}
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Access SHAP & feature data ---------------------------
S <- sv$S            # SHAP matrix (n × p)
X <- sv$X            # original feature data.frame
preds <- predict(bst, as.matrix(X), type = "prob")
feat_names <- colnames(S)        # model’s feature set (p cols)
# ---- 2.  Identify an ID column or create ROW_ID ---------------
id_col <- "ICUSTAY_ID"
if (!id_col %in% colnames(X)) {
X <- X %>% mutate(ROW_ID = row_number())
id_col <- "ROW_ID"
}
# ---- 3.  Pick exemplar indices -------------------------------
high_id <- which.max(preds)
low_id  <- which.min(preds)
mid_id  <- which.min(abs(preds - 0.50))
cases <- list(high = high_id, mid = mid_id, low = low_id)
# ---- 4.  Build tidy table -------------------------------------
build_tbl <- function(row_id, keep = 8) {
tibble(
Feature = feat_names,
Value   = as.numeric(X[row_id, feat_names]),  # <- MATCH length of SHAP
SHAP    = S[row_id, ]
) %>%
arrange(desc(abs(SHAP))) %>%
slice_head(n = keep) %>%
mutate(Patient = X[[id_col]][row_id], .before = Feature)
}
# ---- 5.  Save table as PNG ------------------------------------
save_tbl_png <- function(tbl, fname) {
tbl_round <- tbl %>% mutate(across(where(is.numeric), round, 2))
png(fname, width = 1800, height = 500, res = 200)
grid.table(tbl_round)
dev.off()
}
dir.create("tables", showWarnings = FALSE)
for (nm in names(cases)) {
tbl   <- build_tbl(cases[[nm]])
fpath <- file.path("tables", paste0("case_", nm, "_table.png"))
save_tbl_png(tbl, fpath)
cat("✅  Saved", fpath, "\n")
}
# =======================================================================
#  ETC5250  –  Generate SHAP visualisations for final XGBoost model
#  Outputs: shap_beeswarm.png | shap_high.png | shap_low.png  (in working dir)
# =======================================================================
# ---- 0.  Install/upgrade shapviz (once) -------------------------------
if (!requireNamespace("shapviz", quietly = TRUE) ||
packageVersion("shapviz") < "0.9.7") {
install.packages("shapviz")          # CRAN latest
}
# ---- 1.  Attach packages in safe order --------------------------------
library(xgboost)      # load first so S3 class exists
library(shapviz)      # registers shapviz.xgb.Booster (≥0.9.7)
library(tidymodels)
library(data.table)
library(ggplot2)
# ---- 2.  Check & (if needed) register the S3 method -------------------
if (is.null(getS3method("shapviz", "xgb.Booster", optional = TRUE))) {
# Force-register if shapviz forgot
utils::registerS3method("shapviz", "xgb.Booster",
shapviz:::shapviz.xgb.Booster,
envir = asNamespace("shapviz"))
}
# ---- 3.  Load model and extract booster -------------------------------
wf_or_fit <- readRDS("RDS/xgb_final.rds")       # <-- edit path if needed
bst <- if (inherits(wf_or_fit, "workflow")) {
extract_fit_parsnip(wf_or_fit)$fit
} else if (inherits(wf_or_fit, "model_fit")) {
wf_or_fit$fit
} else if (inherits(wf_or_fit, "xgb.Booster")) {
wf_or_fit
} else stop("xgb_final.rds isn’t a workflow, model_fit, or xgb.Booster")
# ---- 4.  Build design matrix in booster’s feature order ---------------
X_train <- readRDS("RDS/train_processed.rds") |>
dplyr::select(-HOSPITAL_EXPIRE_FLAG) |>
as.matrix()
feat_names <- bst$feature_names
X_train    <- X_train[, feat_names, drop = FALSE]   # reorder & drop extras
# ---- 5.  Construct SHAP object (works for shapviz ≥0.9) ---------------
sv <- shapviz(bst, X_pred = X_train, X = X_train, exact = FALSE)
# ---- 6.  Global beeswarm (top 20) -------------------------------------
p_bee <- sv_importance(sv, kind = "beeswarm", top_n = 20)  # beeswarm plot
ggsave("shap_beeswarm.png", plot = p_bee,
width = 6, height = 4, dpi = 300)
# ---- 7.  Waterfall plots: highest- vs lowest-risk patient -------------
preds   <- predict(bst, X_train, type = "prob")
View(X_train)
View(sv)
train_processed <- readRDS("D:/SEM_3/Machine_Learning/Assignments/Assignment 3/RDS/train_processed.rds")
View(train_processed)
high_id_0 <- which.max(preds[,1])
xgb_final <- readRDS("D:/SEM_3/Machine_Learning/Assignments/Assignment 3/RDS/xgb_final.rds")
View(xgb_final)
high_id <- which.max(preds)
# =======================================================================
#  ETC5250  –  Generate SHAP visualisations for final XGBoost model
#  Outputs: shap_beeswarm.png | shap_high.png | shap_low.png  (in working dir)
# =======================================================================
# ---- 0.  Install/upgrade shapviz (once) -------------------------------
if (!requireNamespace("shapviz", quietly = TRUE) ||
packageVersion("shapviz") < "0.9.7") {
install.packages("shapviz")          # CRAN latest
}
# ---- 1.  Attach packages in safe order --------------------------------
library(xgboost)      # load first so S3 class exists
library(shapviz)      # registers shapviz.xgb.Booster (≥0.9.7)
library(tidymodels)
library(data.table)
library(ggplot2)
# ---- 2.  Check & (if needed) register the S3 method -------------------
if (is.null(getS3method("shapviz", "xgb.Booster", optional = TRUE))) {
utils::registerS3method("shapviz", "xgb.Booster",
shapviz:::shapviz.xgb.Booster,
envir = asNamespace("shapviz"))
}
# --- 2. Load model and processed test data
bst <- readRDS("RDS/xgb_final.rds")
if (inherits(bst, "workflow")) {
bst <- extract_fit_parsnip(bst)$fit
} else if (inherits(bst, "model_fit")) {
bst <- bst$fit
}
X_test <- readRDS("RDS/test_processed.rds") %>% as.matrix()
# Ensure same feature order as in the booster
feat_names <- bst$feature_names
X_test <- X_test[, feat_names, drop = FALSE]
# --- 3. Compute SHAP values on test set
sv_test <- shapviz(bst, X_pred = X_test, X = X_test, exact = FALSE)
# --- 4. Model predictions (probability of positive class)
preds_test <- predict(bst, X_test, type = "prob")
# If predict(type="prob") returns a matrix/dataframe, use the correct column
# For xgboost, usually this is just a vector, but if not, use: preds_test[, "1"]
# --- 5. Identify high/low risk patients (row index)
high_id_test <- which.max(preds_test)
low_id_test  <- which.min(preds_test)
# --- 6. Beeswarm plot (global SHAP on test set)
p_bee_test <- sv_importance(sv_test, kind = "beeswarm", top_n = 20)
ggsave("shap_beeswarm_test.png", plot = p_bee_test, width = 6, height = 4, dpi = 300)
# --- 7. Waterfall plots for individual patients (test set)
p_high_test <- sv_waterfall(sv_test, high_id_test, max_display = 12)
p_low_test  <- sv_waterfall(sv_test, low_id_test, max_display = 12)
ggsave("shap_high_test.png", plot = p_high_test, width = 6, height = 4, dpi = 300)
ggsave("shap_low_test.png",  plot = p_low_test, width = 6, height = 4, dpi = 300)
cat("\n✅  SHAP visualisations for TEST set saved as:\n",
"  shap_beeswarm_test.png\n  shap_high_test.png\n  shap_low_test.png\n")
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Access SHAP & feature data ---------------------------
S <- sv$S            # SHAP matrix (n × p)
# ---- 5.  Save table as PNG ------------------------------------
save_tbl_png <- function(tbl, fname) {
tbl_round <- tbl %>% mutate(across(where(is.numeric), round, 2))
png(fname, width = 1800, height = 500, res = 200)
grid.table(tbl_round)
dev.off()
}
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(tidyverse)
library(gridExtra)
# ---- 1.  Access SHAP & feature data ---------------------------
S <- sv$S            # SHAP matrix (n × p)
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(xgboost)
library(shapviz)
# Load your model
bst <- readRDS("RDS/xgb_final.rds")
if (inherits(bst, "workflow")) {
bst <- extract_fit_parsnip(bst)$fit
} else if (inherits(bst, "model_fit")) {
bst <- bst$fit
}
# Load your processed test or train data
X_test <- readRDS("RDS/test_processed.rds") # or "train_processed.rds"
feat_names <- bst$feature_names
X_test <- X_test[, feat_names, drop = FALSE]
# Create the shapviz object (sv)
sv <- shapviz(bst, X_pred = X_test, X = X_test, exact = FALSE)
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(xgboost)
library(shapviz)
# Load your model
bst <- readRDS("RDS/xgb_final.rds")
if (inherits(bst, "workflow")) {
bst <- extract_fit_parsnip(bst)$fit
} else if (inherits(bst, "model_fit")) {
bst <- bst$fit
}
# Load your processed test or train data
X_test <- readRDS("RDS/test_processed.rds") # or "train_processed.rds"
feat_names <- bst$feature_names
X_test <- X_test[, feat_names, drop = FALSE]
# Create the shapviz object (sv)
sv <- shapviz(bst, X_pred = X_test, X = X_test, exact = FALSE)
# ===============================================================
#  SHAP top-driver tables with Patient ID  –  error-free version
#  Inputs already in workspace:
#      bst  ... xgboost booster
#      sv   ... shapviz object
# ===============================================================
library(xgboost)
library(shapviz)
# Load your model
bst <- readRDS("RDS/xgb_final.rds")
if (inherits(bst, "workflow")) {
bst <- extract_fit_parsnip(bst)$fit
} else if (inherits(bst, "model_fit")) {
bst <- bst$fit
}
# Load your processed test or train data
X_test <- readRDS("RDS/test_processed.rds") # or "train_processed.rds"
feat_names <- bst$feature_names
X_test <- X_test[, feat_names, drop = FALSE]
X_test <- as.matrix(X_test)
# Create the shapviz object (sv)
sv <- shapviz(bst, X_pred = X_test, X = X_test, exact = FALSE)
# ---- 1.  Access SHAP & feature data ---------------------------
S <- sv$S            # SHAP matrix (n × p)
X <- sv$X            # original feature data.frame
preds <- predict(bst, as.matrix(X), type = "prob")
feat_names <- colnames(S)        # model’s feature set (p cols)
# ---- 2.  Identify an ID column or create ROW_ID ---------------
id_col <- "ICUSTAY_ID"
if (!id_col %in% colnames(X)) {
X <- X %>% mutate(ROW_ID = row_number())
id_col <- "ROW_ID"
}
# ---- 3.  Pick exemplar indices -------------------------------
high_id <- which.max(preds)
low_id  <- which.min(preds)
mid_id  <- which.min(abs(preds - 0.50))
cases <- list(high = high_id, mid = mid_id, low = low_id)
# ---- 4.  Build tidy table -------------------------------------
build_tbl <- function(row_id, keep = 8) {
tibble(
Feature = feat_names,
SHAP    = S[row_id, ]
) %>%
arrange(desc(abs(SHAP))) %>%
slice_head(n = keep) %>%
mutate(Patient = X[[id_col]][row_id], .before = Feature)
}
# ---- 5.  Save table as PNG ------------------------------------
save_tbl_png <- function(tbl, fname) {
tbl_round <- tbl %>% mutate(across(where(is.numeric), round, 2))
png(fname, width = 1800, height = 500, res = 200)
grid.table(tbl_round)
dev.off()
}
dir.create("tables", showWarnings = FALSE)
for (nm in names(cases)) {
tbl   <- build_tbl(cases[[nm]])
fpath <- file.path("tables", paste0("case_", nm, "_table.png"))
save_tbl_png(tbl, fpath)
cat("✅  Saved", fpath, "\n")
}
# =======================================================================
#  ETC5250  –  Generate SHAP visualisations for final XGBoost model
#  Outputs: shap_beeswarm.png | shap_high.png | shap_low.png  (in working dir)
# =======================================================================
# ---- 0.  Install/upgrade shapviz (once) -------------------------------
if (!requireNamespace("shapviz", quietly = TRUE) ||
packageVersion("shapviz") < "0.9.7") {
install.packages("shapviz")          # CRAN latest
}
# ---- 1.  Attach packages in safe order --------------------------------
library(xgboost)      # load first so S3 class exists
library(shapviz)      # registers shapviz.xgb.Booster (≥0.9.7)
library(tidymodels)
library(data.table)
library(ggplot2)
# ---- 2.  Check & (if needed) register the S3 method -------------------
if (is.null(getS3method("shapviz", "xgb.Booster", optional = TRUE))) {
utils::registerS3method("shapviz", "xgb.Booster",
shapviz:::shapviz.xgb.Booster,
envir = asNamespace("shapviz"))
}
# --- 2. Load model and processed test data
bst <- readRDS("RDS/xgb_final.rds")
if (inherits(bst, "workflow")) {
bst <- extract_fit_parsnip(bst)$fit
} else if (inherits(bst, "model_fit")) {
bst <- bst$fit
}
X_test <- readRDS("RDS/test_processed.rds") %>% as.matrix()
# Ensure same feature order as in the booster
feat_names <- bst$feature_names
X_test <- X_test[, feat_names, drop = FALSE]
# --- 3. Compute SHAP values on test set
sv_test <- shapviz(bst, X_pred = X_test, X = X_test, exact = FALSE)
# --- 4. Model predictions (probability of positive class)
preds_test <- predict(bst, X_test, type = "prob")
high_id_test <- which.max(preds_test)
low_id_test  <- which.min(preds_test)
low_id_test  <- which.min(preds_test$prob)
low_id_test |> desc()
preds_test |> desc()
preds_test |> arrange()
arrange(preds_test)
View(X_test)
preds_test[low_id_test]
